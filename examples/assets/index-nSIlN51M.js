var P=Object.defineProperty;var I=(i,s,e)=>s in i?P(i,s,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[s]=e;var t=(i,s,e)=>(I(i,typeof s!="symbol"?s+"":s,e),e);import{E as b,D as M,C as D}from"./simple-camera-B_AjQ3IU.js";import{S as E,a8 as m,W as A,M as w,I as g,f as U,am as p,C as S,a9 as B}from"./index-chvdFvuw.js";class x{constructor(){t(this,"trigger",async s=>{const e=this.handlers.slice(0);for(const r of e)await r(s)});t(this,"handlers",[])}add(s){this.handlers.push(s)}remove(s){this.handlers=this.handlers.filter(e=>e!==s)}reset(){this.handlers.length=0}}class y{static isTransparent(s){return s.transparent&&s.opacity<1}}function T(i,s,e,r){return new Promise((n,o)=>{function a(){const l=i.clientWaitSync(s,e,0);if(l===i.WAIT_FAILED){o();return}if(l===i.TIMEOUT_EXPIRED){setTimeout(a,r);return}n()}a()})}async function R(i,s,e,r,n,o,a){const l=i.fenceSync(i.SYNC_GPU_COMMANDS_COMPLETE,0);i.flush(),await T(i,l,0,10),i.deleteSync(l),i.bindBuffer(s,e),i.getBufferSubData(s,r,n,o,a),i.bindBuffer(s,null)}async function V(i,s,e,r,n,o,a,l){const d=i.createBuffer();return i.bindBuffer(i.PIXEL_PACK_BUFFER,d),i.bufferData(i.PIXEL_PACK_BUFFER,l.byteLength,i.STREAM_READ),i.readPixels(s,e,r,n,o,a,0),i.bindBuffer(i.PIXEL_PACK_BUFFER,null),await R(i,i.PIXEL_PACK_BUFFER,d,0,l),i.deleteBuffer(d),l}class L{constructor(s,e,r){t(this,"onDisposed",new b);t(this,"onViewUpdated",new x);t(this,"enabled",!0);t(this,"needsUpdate",!1);t(this,"renderDebugFrame",!1);t(this,"components");t(this,"world");t(this,"renderer");t(this,"autoUpdate",!0);t(this,"updateInterval",1e3);t(this,"worker");t(this,"scene",new E);t(this,"_width",512);t(this,"_height",512);t(this,"_availableColor",1);t(this,"renderTarget");t(this,"bufferSize");t(this,"_buffer");t(this,"_isWorkerBusy",!1);t(this,"updateVisibility",async s=>{if(!this.enabled||!this.needsUpdate&&!s||this._isWorkerBusy)return;this._isWorkerBusy=!0;const e=this.world.camera.three;e.updateMatrix(),this.renderer.setSize(this._width,this._height),this.renderer.setRenderTarget(this.renderTarget),this.renderer.render(this.scene,e);const r=this.renderer.getContext();await V(r,0,0,this._width,this._height,r.RGBA,r.UNSIGNED_BYTE,this._buffer),this.renderer.setRenderTarget(null),this.renderDebugFrame&&this.renderer.render(this.scene,e),this.worker.postMessage({buffer:this._buffer}),this.needsUpdate=!1});if(!e.renderer)throw new Error("The given world must have a renderer!");this.components=s,this.applySettings(r),this.world=e,this.renderer=new m,this.renderTarget=new A(this._width,this._height),this.bufferSize=this._width*this._height*4,this._buffer=new Uint8Array(this.bufferSize),this.renderer.clippingPlanes=e.renderer.clippingPlanes;const n=`
      addEventListener("message", (event) => {
        const { buffer } = event.data;
        const colors = new Map();
        for (let i = 0; i < buffer.length; i += 4) {
          const r = buffer[i];
          const g = buffer[i + 1];
          const b = buffer[i + 2];
          const code = "" + r + "-" + g + "-" + b;
          if(colors.has(code)) {
            colors.set(code, colors.get(code) + 1);
          } else {
            colors.set(code, 1);
          }
        }
        postMessage({ colors });
      });
    `,o=new Blob([n],{type:"application/javascript"});this.worker=new Worker(URL.createObjectURL(o))}dispose(){this.enabled=!1;for(const s of this.scene.children)s.removeFromParent();this.onViewUpdated.reset(),this.worker.terminate(),this.renderer.dispose(),this.renderTarget.dispose(),this._buffer=null,this.onDisposed.reset()}getAvailableColor(){let s=BigInt(this._availableColor.toString());const e=[];do e.unshift(Number(s%256n)),s/=256n;while(s);for(;e.length!==3;)e.unshift(0);const[r,n,o]=e,a=`${r}-${n}-${o}`;return{r,g:n,b:o,code:a}}increaseColor(){if(this._availableColor===256*256*256){console.warn("Color can't be increased over 256 x 256 x 256!");return}this._availableColor++}decreaseColor(){if(this._availableColor===1){console.warn("Color can't be decreased under 0!");return}this._availableColor--}applySettings(s){s&&(s.updateInterval!==void 0&&(this.updateInterval=s.updateInterval),s.height!==void 0&&(this._height=s.height),s.width!==void 0&&(this._width=s.width),s.autoUpdate!==void 0&&(this.autoUpdate=s.autoUpdate))}}class W extends L{constructor(e,r,n){super(e,r,n);t(this,"threshold",100);t(this,"onViewUpdated",new b);t(this,"colorMeshes",new Map);t(this,"isProcessing",!1);t(this,"_colorCodeMeshMap",new Map);t(this,"_meshIDColorCodeMap",new Map);t(this,"_currentVisibleMeshes",new Set);t(this,"_recentlyHiddenMeshes",new Set);t(this,"_intervalID",null);t(this,"_transparentMat",new w({transparent:!0,opacity:0}));t(this,"handleWorkerMessage",async e=>{if(this.isProcessing)return;const r=e.data.colors;this._recentlyHiddenMeshes=new Set(this._currentVisibleMeshes),this._currentVisibleMeshes.clear();for(const[n,o]of r){if(o<this.threshold)continue;const a=this._colorCodeMeshMap.get(n);a&&(this._currentVisibleMeshes.add(a),this._recentlyHiddenMeshes.delete(a))}this.onViewUpdated.trigger({seen:this._currentVisibleMeshes,unseen:this._recentlyHiddenMeshes}),this._isWorkerBusy=!1});this.worker.addEventListener("message",this.handleWorkerMessage),this.autoUpdate&&window.setInterval(async()=>{this.isProcessing||await this.updateVisibility()},this.updateInterval),this.onViewUpdated.add(({seen:o,unseen:a})=>{for(const l of o)l.visible=!0;for(const l of a)l.visible=!1})}dispose(){super.dispose(),this._intervalID!==null&&(window.clearInterval(this._intervalID),this._intervalID=null),this._currentVisibleMeshes.clear(),this._recentlyHiddenMeshes.clear(),this._meshIDColorCodeMap.clear(),this._transparentMat.dispose(),this._colorCodeMeshMap.clear();const e=this.components.get(M);for(const r in this.colorMeshes){const n=this.colorMeshes.get(r);n&&e.destroy(n,!0)}this.colorMeshes.clear()}add(e){if(!this.enabled)return;if(this.isProcessing){console.log("Culler processing not finished yet.");return}this.isProcessing=!0;const r=e instanceof g,{geometry:n,material:o}=e,{colorMaterial:a,code:l}=this.getAvailableMaterial();let d;if(Array.isArray(o)){let _=!0;const f=[];for(const v of o)y.isTransparent(v)?f.push(this._transparentMat):(_=!1,f.push(a));if(_){a.dispose(),this.isProcessing=!1;return}d=f}else if(y.isTransparent(o)){a.dispose(),this.isProcessing=!1;return}else d=a;this._colorCodeMeshMap.set(l,e),this._meshIDColorCodeMap.set(e.uuid,l);const u=r?e.count:1,h=new g(n,d,u);r?h.instanceMatrix=e.instanceMatrix:h.setMatrixAt(0,new U),e.visible=!1,h.applyMatrix4(e.matrix),h.updateMatrix(),this.scene.add(h),this.colorMeshes.set(e.uuid,h),this.increaseColor(),this.isProcessing=!1}remove(e){if(this.isProcessing){console.log("Culler processing not finished yet.");return}this.isProcessing=!0;const r=this.components.get(M);this._currentVisibleMeshes.delete(e),this._recentlyHiddenMeshes.delete(e);const n=this.colorMeshes.get(e.uuid),o=this._meshIDColorCodeMap.get(e.uuid);if(!n||!o){this.isProcessing=!1,console.log(e.visible);return}this._colorCodeMeshMap.delete(o),this._meshIDColorCodeMap.delete(e.uuid),this.colorMeshes.delete(e.uuid),n.geometry=void 0,n.material=[],r.destroy(n,!0),this._recentlyHiddenMeshes.delete(e),this._currentVisibleMeshes.delete(e),this.isProcessing=!1}getAvailableMaterial(){const{r:e,g:r,b:n,code:o}=this.getAvailableColor(),a=p.enabled;p.enabled=!1;const l=new S(`rgb(${e}, ${r}, ${n})`);if(!this.world.renderer)throw new Error("Renderer not found in the world!");const d=this.world.renderer.clippingPlanes,u=new w({color:l,clippingPlanes:d,side:B});return p.enabled=a,{colorMaterial:u,code:o}}}const c=class c extends D{constructor(e){super(e);t(this,"_enabled",!0);t(this,"list",new Map);t(this,"onDisposed",new b);e.add(c.uuid,this)}get enabled(){return this._enabled}set enabled(e){this._enabled=e;for(const[r,n]of this.list)n.enabled=e}create(e,r){if(this.list.has(e.uuid))return this.list.get(e.uuid);const n=new W(this.components,e,r);return this.list.set(e.uuid,n),n}delete(e){const r=this.list.get(e.uuid);r&&r.dispose(),this.list.delete(e.uuid)}dispose(){this.enabled=!1,this.onDisposed.trigger(c.uuid),this.onDisposed.reset();for(const[e,r]of this.list)r.dispose();this.list.clear()}};t(c,"uuid","69f2a50d-c266-44fc-b1bd-fa4d34be89e6");let C=c;export{C};
