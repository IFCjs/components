import{b as y,L as I,C as L}from"./web-ifc-api-CpQ3aV8c.js";import{C as A,T as B,s as F,w as S,L as T,a as P,O as x,B as D}from"./index-B03kGVBW.js";import{b as M,u as U,d as O,A as G}from"./index-lUHwa_Wd.js";import{T as W,z as m,m as f}from"./index-BEvRfOoQ.js";import{S as z}from"./stats.min-GTpOrGrX.js";import"./_commonjsHelpers-Cpj98o6Y.js";const R=document.getElementById("container"),n=new A,$=n.get(B),e=$.create();e.scene=new F(n);e.renderer=new M(n,R);e.camera=new S(n);e.renderer.postproduction.enabled=!0;e.renderer.postproduction.customEffects.outlineEnabled=!0;n.init();e.camera.controls.setLookAt(12,6,8,0,0,-10);e.scene.setup();const j=n.get(T),b=j.create(e);b.three.position.y-=1;b.config.color.setHex(6710886);e.renderer.postproduction.customEffects.excludedMeshes.push(b.three);e.scene.three.background=null;const g=n.get(P),v=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),N=await v.arrayBuffer(),_=new Uint8Array(N),s=g.load(_);e.scene.three.add(s);const q=await fetch("https://thatopen.github.io/engine_components/resources/small.json"),H=await q.json();s.setLocalProperties(H);const c=new z;c.showPanel(2);document.body.append(c.dom);c.dom.style.left="0px";c.dom.style.zIndex="unset";e.renderer.onBeforeUpdate.add(()=>c.begin());e.renderer.onAfterUpdate.add(()=>c.end());const i=n.get(U);i.world=e;await i.generate(s);const d=n.get(O);d.setup({world:e});const V=n.get(x),l=V.create(e);for(const t of s.items)l.add(t.mesh);l.needsUpdate=!0;e.camera.controls.addEventListener("sleep",()=>{l.needsUpdate=!0});const a=n.get(D),r=n.get(G);a.byModel(s.uuid,s);a.byEntity(s);const k=a.find({models:[s.uuid]}),h=a.find({entities:["IFCWALLSTANDARDCASE","IFCWALL"]}),w=a.find({entities:["IFCDOOR","IFCWINDOW","IFCPLATE","IFCMEMBER"]}),J=new y({color:"gray",side:2}),K=new I({color:"black"}),Q=new y({color:"black",opacity:.5,side:2,transparent:!0});r.styles.create("thick",new Set,e,K,J,Q);for(const t in h){const o=g.list.get(t);if(!o)continue;const{mesh:u}=o;r.styles.list.thick.fragments[t]=new Set(h[t]),r.styles.list.thick.meshes.add(u)}r.styles.create("thin",new Set,e);for(const t in w){const o=g.list.get(t);if(!o)continue;const{mesh:u}=o;r.styles.list.thin.fragments[t]=new Set(w[t]),r.styles.list.thin.meshes.add(u)}await r.update(!0);W.init();const C=m.create(()=>f`
  <bim-panel active label="Plans Tutorial" class="options-menu">
      <bim-panel-section collapsed name="floorPlans" label="Plan list">
      </bim-panel-section>
    </bim-panel>
    `);document.body.append(C);const X=e.renderer.postproduction.customEffects.minGloss,p=new L("white"),E=C.querySelector("bim-panel-section[name='floorPlans']");for(const t of i.list){const o=m.create(()=>f`
      <bim-button checked label="${t.name}"
        @click="${()=>{e.renderer.postproduction.customEffects.minGloss=.1,d.backupColor=p,a.setColor(k,p),e.scene.three.background=p,i.goTo(t.id),l.needsUpdate=!0}}">
      </bim-button>
    `);E.append(o)}const Y=e.scene.three.background,Z=m.create(()=>f`
      <bim-button checked label="Exit"
        @click="${()=>{d.backupColor=null,d.clear(),e.renderer.postproduction.customEffects.minGloss=X,a.resetColor(k),e.scene.three.background=Y,i.exitPlanView(),l.needsUpdate=!0}}">
      </bim-button>
    `);E.append(Z);
