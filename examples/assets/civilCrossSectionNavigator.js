import{C as B,L as M}from"./web-ifc-api-CpQ3aV8c.js";import{C as E,T as L,s as S,w as k,L as A,a as C,B as D}from"./index-B03kGVBW.js";import{T}from"./index-BEvRfOoQ.js";import{w as v}from"./index-fOrz5L1Y.js";import{S as x}from"./stats.min-GTpOrGrX.js";import{G as I,g as P,i as U,n as j,A as G}from"./index-lUHwa_Wd.js";import"./_commonjsHelpers-Cpj98o6Y.js";T.init();v.init();const y=document.getElementById("container"),e=new E,H=e.get(L),t=H.create();t.scene=new S(e);t.renderer=new I(e,y);t.camera=new k(e);e.init();t.scene.setup();t.camera.controls.setLookAt(5,5,5,0,0,0);y.appendChild(t.renderer.three2D.domElement);const N=e.get(A);N.create(t);t.scene.three.background=null;const b=e.get(C),W=await fetch("https://thatopen.github.io/engine_components/resources/road.frag"),_=await W.arrayBuffer(),z=new Uint8Array(_),d=b.load(z);t.scene.three.add(d);const F=await fetch("https://thatopen.github.io/engine_components/resources/road.json");d.setLocalProperties(await F.json());const w=document.getElementById("scene-2d-left");w.components=e;if(!w.world)throw new Error("World not found!");const c=e.get(P);c.world=w.world;await c.draw(d);const l=e.get(U);l.world=t;l.draw(d);const g=document.getElementById("scene-2d-right");g.components=e;if(!g.world)throw new Error("World not found!");const f=e.get(j);f.world=g.world;f.world3D=t;c.onMarkerChange.add(({alignment:o,percentage:n,type:r,curve:s})=>{if(l.setMarker(o,n,r),r==="select"){const i=s.alignment.absolute[s.index].mesh,m=o.getPointAt(n,"absolute");f.set(i,m)}});c.onHighlight.add(({mesh:o})=>{l.highlighter.select(o);const n=o.curve.index,r=o.curve.alignment.absolute[n];r.mesh.geometry.computeBoundingSphere();const s=r.mesh.geometry.boundingSphere;s&&t.camera.controls.fitToSphere(s,!0)});c.onMarkerHidden.add(({type:o})=>{l.hideMarker(o)});const h=e.get(D);h.byEntity(d);const R=h.list,p=e.get(G),u=p.styles.list;for(const o in R.entities){const n=h.find({entities:[o]}),r=new B(Math.random(),Math.random(),Math.random()),s=new M({color:r});p.styles.create(o,new Set,g.world,s);for(const i in n){const m=b.list.get(i);m&&(u[o].fragments[i]=new Set(n[i]),u[o].meshes.add(m.mesh))}}p.update(!0);const a=new x;a.showPanel(2);document.body.append(a.dom);a.dom.style.left="0px";a.dom.style.zIndex="unset";t.renderer.onBeforeUpdate.add(()=>a.begin());t.renderer.onAfterUpdate.add(()=>a.end());
