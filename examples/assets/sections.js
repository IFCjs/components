import{V as b,b as C,L as S,C as F}from"./web-ifc-api-Dxv4iFj4.js";import{C as A,T as B,e as x,_ as T,O,a as D,F as M,x as U}from"./index-BRzxhLMM.js";import{T as G,z as p,m as f}from"./index-DtbylpTq.js";import{S as W}from"./stats.min-DYv0AsOH.js";import{L as _,O as z,f as P,A as R}from"./index-CnRcHl0y.js";const $=document.getElementById("container"),t=new A,j=t.get(B),e=j.create();e.scene=new x(t);e.renderer=new _(t,$);e.camera=new T(t);e.renderer.postproduction.enabled=!0;e.renderer.postproduction.customEffects.outlineEnabled=!0;t.init();e.camera.controls.setLookAt(12,6,8,0,0,-10);e.scene.setup();const v=t.get(O),g=v.create(e);g.config.color.setHex(6710886);g.three.position.y-=1;e.renderer.postproduction.customEffects.excludedMeshes.push(g.three);e.scene.three.background=null;const h=t.get(D),N=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),V=await N.arrayBuffer(),q=new Uint8Array(V),s=h.load(q);e.scene.three.add(s);const H=await fetch("https://thatopen.github.io/engine_components/resources/small.json"),J=await H.json();s.setLocalProperties(J);const r=new W;r.showPanel(2);document.body.append(r.dom);r.dom.style.left="0px";r.dom.style.zIndex="unset";e.renderer.onBeforeUpdate.add(()=>r.begin());e.renderer.onAfterUpdate.add(()=>r.end());const d=t.get(z);d.world=e;const w=d.create({name:"Section 01",id:"1234",normal:new b(-1,0,0),point:new b(1.5,0,0)}),l=t.get(P);l.setup({world:e});const K=t.get(M),i=K.create(e);for(const n of s.items)i.add(n.mesh);i.needsUpdate=!0;e.camera.controls.addEventListener("sleep",()=>{i.needsUpdate=!0});const c=t.get(U),o=t.get(R);c.byModel(s.uuid,s);c.byEntity(s);const I=c.find({models:[s.uuid]}),y=c.find({entities:["IFCWALLSTANDARDCASE","IFCWALL","IFCSLAB"]}),k=c.find({entities:["IFCDOOR","IFCWINDOW","IFCPLATE","IFCMEMBER"]}),Q=new C({color:"gray",side:2}),X=new S({color:"black"}),Y=new C({color:"black",opacity:.5,side:2,transparent:!0});o.styles.create("thick",new Set,e,X,Q,Y);for(const n in y){const a=h.list.get(n);if(!a)continue;const{mesh:u}=a;o.styles.list.thick.fragments[n]=new Set(y[n]),o.styles.list.thick.meshes.add(u)}o.styles.create("thin",new Set,e);for(const n in k){const a=h.list.get(n);if(!a)continue;const{mesh:u}=a;o.styles.list.thin.fragments[n]=new Set(k[n]),o.styles.list.thin.meshes.add(u)}await o.update(!0);G.init();const E=p.create(()=>f`
  <bim-panel active label="Sections Tutorial" class="options-menu">
      <bim-panel-section collapsed name="sections" label="Section list">
      </bim-panel-section>
    </bim-panel>
    `);document.body.append(E);const Z=e.renderer.postproduction.customEffects.minGloss,m=new F("white"),L=E.querySelector("bim-panel-section[name='sections']"),ee=p.create(()=>f`
      <bim-button checked label="${w.name}"
        @click="${()=>{e.renderer.postproduction.customEffects.minGloss=.1,l.backupColor=m,c.setColor(I,m),e.scene.three.background=m,d.goTo(w.id),i.needsUpdate=!0}}">
      </bim-button>
    `);L.append(ee);const te=e.scene.three.background,ne=p.create(()=>f`
      <bim-button checked label="Exit"
        @click="${()=>{l.backupColor=null,l.clear(),e.renderer.postproduction.customEffects.minGloss=Z,c.resetColor(I),e.scene.three.background=te,d.exit(),i.needsUpdate=!0}}">
      </bim-button>
    `);L.append(ne);
