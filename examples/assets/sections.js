import{V as h,b as C,L as S,C as A}from"./web-ifc-api-CpQ3aV8c.js";import{C as B,T as F,s as T,w as O,L as x,a as D,O as M,B as U}from"./index-B03kGVBW.js";import{T as G,z as p,m as f}from"./index-BEvRfOoQ.js";import{S as W}from"./stats.min-GTpOrGrX.js";import{b as z,O as P,d as R,A as $}from"./index-lUHwa_Wd.js";import"./_commonjsHelpers-Cpj98o6Y.js";const j=document.getElementById("container"),t=new B,v=t.get(F),e=v.create();e.scene=new T(t);e.renderer=new z(t,j);e.camera=new O(t);e.renderer.postproduction.enabled=!0;e.renderer.postproduction.customEffects.outlineEnabled=!0;t.init();e.camera.controls.setLookAt(12,6,8,0,0,-10);e.scene.setup();const N=t.get(x),b=N.create(e);b.config.color.setHex(6710886);b.three.position.y-=1;e.renderer.postproduction.customEffects.excludedMeshes.push(b.three);e.scene.three.background=null;const g=t.get(D),V=await fetch("https://thatopen.github.io/engine_components/resources/small.frag"),_=await V.arrayBuffer(),q=new Uint8Array(_),s=g.load(q);e.scene.three.add(s);const H=await fetch("https://thatopen.github.io/engine_components/resources/small.json"),J=await H.json();s.setLocalProperties(J);const c=new W;c.showPanel(2);document.body.append(c.dom);c.dom.style.left="0px";c.dom.style.zIndex="unset";e.renderer.onBeforeUpdate.add(()=>c.begin());e.renderer.onAfterUpdate.add(()=>c.end());const d=t.get(P);d.world=e;const w=d.create({name:"Section 01",id:"1234",normal:new h(-1,0,0),point:new h(1.5,0,0)}),l=t.get(R);l.setup({world:e});const K=t.get(M),i=K.create(e);for(const n of s.items)i.add(n.mesh);i.needsUpdate=!0;e.camera.controls.addEventListener("sleep",()=>{i.needsUpdate=!0});const r=t.get(U),o=t.get($);r.byModel(s.uuid,s);r.byEntity(s);const I=r.find({models:[s.uuid]}),y=r.find({entities:["IFCWALLSTANDARDCASE","IFCWALL","IFCSLAB"]}),k=r.find({entities:["IFCDOOR","IFCWINDOW","IFCPLATE","IFCMEMBER"]}),Q=new C({color:"gray",side:2}),X=new S({color:"black"}),Y=new C({color:"black",opacity:.5,side:2,transparent:!0});o.styles.create("thick",new Set,e,X,Q,Y);for(const n in y){const a=g.list.get(n);if(!a)continue;const{mesh:u}=a;o.styles.list.thick.fragments[n]=new Set(y[n]),o.styles.list.thick.meshes.add(u)}o.styles.create("thin",new Set,e);for(const n in k){const a=g.list.get(n);if(!a)continue;const{mesh:u}=a;o.styles.list.thin.fragments[n]=new Set(k[n]),o.styles.list.thin.meshes.add(u)}await o.update(!0);G.init();const E=p.create(()=>f`
  <bim-panel active label="Sections Tutorial" class="options-menu">
      <bim-panel-section collapsed name="sections" label="Section list">
      </bim-panel-section>
    </bim-panel>
    `);document.body.append(E);const Z=e.renderer.postproduction.customEffects.minGloss,m=new A("white"),L=E.querySelector("bim-panel-section[name='sections']"),ee=p.create(()=>f`
      <bim-button checked label="${w.name}"
        @click="${()=>{e.renderer.postproduction.customEffects.minGloss=.1,l.backupColor=m,r.setColor(I,m),e.scene.three.background=m,d.goTo(w.id),i.needsUpdate=!0}}">
      </bim-button>
    `);L.append(ee);const te=e.scene.three.background,ne=p.create(()=>f`
      <bim-button checked label="Exit"
        @click="${()=>{l.backupColor=null,l.clear(),e.renderer.postproduction.customEffects.minGloss=Z,r.resetColor(I),e.scene.three.background=te,d.exit(),i.needsUpdate=!0}}">
      </bim-button>
    `);L.append(ne);
