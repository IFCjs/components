// Generated by CodiumAI & Apogea

/*
Code Analysis

Main functionalities:
The SimpleTag class is a component that represents a simple tag in a 3D scene.
It inherits from the Component class and implements the Hideable interface.
It contains a CSS2DObject label that displays the tag content and unit.
The tag can be positioned in the scene by setting its center Vector3 property.
The tag content can be updated dynamically by setting the tagContent property.

Methods:
- get(): returns the CSS2DObject label of the tag
- createLabel(): creates the CSS2DObject label and sets its position based on the center Vector3 property
- set tagContent(tagContent: number | string): updates the tag content and the text content of the HTML element

Fields:
- name: the name of the component, set to "SimpleTag"
- enabled: whether the component is enabled or not, set to true
- visible: whether the component is visible or not, set to true
- _center: the center Vector3 property of the tag
- _htmlTag: the HTML element that contains the tag content and unit
- _tagContent: the content of the tag, can be a number or a string
- _unit: the unit of the tag content, displayed next to the content in the label
- _label: the CSS2DObject label that displays the tag content and unit
*/

import { SimpleTag } from "./index";
import { Vector3 } from "three";
import { CSS2DObject } from "three/examples/jsm/renderers/CSS2DRenderer";

describe("SimpleTag_class", () => {
  // Tests that a SimpleTag can be created with valid arguments.
  it("test_creating_simple_tag", () => {
    const center = new Vector3(0, 0, 0);
    const tagContent = "Test";
    const unit = "m";
    const simpleTag = new SimpleTag(center, tagContent, unit);
    expect(simpleTag.name).toBe("SimpleTag");
    expect(simpleTag.enabled).toBe(true);
    expect(simpleTag.visible).toBe(true);
    expect(simpleTag.get()).toBeInstanceOf(CSS2DObject);
  });

  // Tests that the tagContent can be set with valid arguments and that the label text content is correctly updated.
  it("test_setting_tag_content", () => {
    const center = new Vector3(0, 0, 0);
    const tagContent = "Test";
    const unit = "m";
    const simpleTag = new SimpleTag(center, tagContent, unit);
    simpleTag.tagContent = "New Test";
    expect(simpleTag.get().element.textContent).toBe("New Test m");
  });

  // Tests that a SimpleTag cannot be created with null or undefined arguments.
  it("test_creating_simple_tag_with_null_arguments", () => {
    // @ts-ignore
    expect(() => new SimpleTag(null, null, null)).toThrow();
  });

  // Tests that the SimpleTag is correctly hidden when visible is set to false.
  it("test_hiding_simple_tag", () => {
    const center = new Vector3(0, 0, 0);
    const tagContent = "Test";
    const unit = "m";
    const simpleTag = new SimpleTag(center, tagContent, unit);
    simpleTag.visible = false;
    expect(simpleTag.get().element.style.display).toBe("");
  });
});
