// Generated by CodiumAI

/*
Code Analysis

Main functionalities:
The SimpleGrid class is a basic Three.js grid helper that creates a grid with a specified
size and adds it to the scene. It implements the Hideable and Disposable interfaces,
allowing the grid to be hidden or shown and disposed of to prevent memory leaks.

Methods:
- constructor(components: Components): Initializes the SimpleGrid instance by creating a new Three.js GridHelper and adding it to the scene.
- get(): Returns the Three.js GridHelper instance.
- dispose(): Disposes of the SimpleGrid instance by calling the dispose method of the Disposer class.

Fields:
- name: A string that identifies the SimpleGrid instance.
- enabled: A boolean that determines whether the SimpleGrid instance is active or not.
- visible: A boolean that determines whether the grid is currently visible or not.
- _grid: The Three.js GridHelper instance created by the constructor.
- _disposer: An instance of the Disposer class used to dispose of the SimpleGrid instance.
*/

import * as THREE from "three";
import { Components } from "../Components";
import { SimpleGrid } from "./index";
import { Disposer } from "../Disposer";
import { SimpleScene } from "../SimpleScene";
import { SimpleRenderer } from "../SimpleRenderer";
import { SimpleCamera } from "../SimpleCamera";

describe("SimpleGrid_class", () => {
  // Tests that a SimpleGrid instance can be created successfully.
  it("test_create_simple_grid_instance", () => {
    const components = new Components();
    components.scene = new SimpleScene(components);

    components.renderer = new SimpleRenderer(
      components,
      document.createElement("div")
    );

    components.camera = new SimpleCamera(components);

    components.init();
    const simpleGrid = new SimpleGrid(components);
    expect(simpleGrid).toBeInstanceOf(SimpleGrid);
  });

  // Tests that the grid helper instance can be retrieved successfully.
  it("test_get_grid_helper", () => {
    const components = new Components();
    const simpleGrid = new SimpleGrid(components);
    const gridHelper = simpleGrid.get();
    expect(gridHelper).toBeInstanceOf(THREE.GridHelper);
  });

  // Tests that an error is thrown when trying to dispose the grid helper when it has no parent.
  it("test_dispose_grid_helper_no_parent", () => {
    const components = new Components();
    const simpleGrid = new SimpleGrid(components);
    const gridHelper = simpleGrid.get();
    const disposer = new Disposer();
    gridHelper.removeFromParent();
    expect(() => disposer.dispose(gridHelper)).toThrowError(
      "Cannot read property 'children' of null"
    );
  });

  // Tests that an error is thrown when trying to dispose the grid helper when it has no geometry.
  it("test_dispose_grid_helper_no_geometry", () => {
    const components = new Components();
    const simpleGrid = new SimpleGrid(components);
    const gridHelper = simpleGrid.get();
    const disposer = new Disposer();

    expect(() => disposer.dispose(gridHelper)).toThrowError(
      "Cannot read property 'dispose' of null"
    );
  });

  // Tests that the visibility of the grid helper can be set successfully.
  it("test_set_grid_visibility", () => {
    const components = new Components();
    const simpleGrid = new SimpleGrid(components);
    simpleGrid.visible = false;
    expect(simpleGrid.visible).toBe(false);
  });

  // Tests that the grid helper can be disposed of successfully.
  it("test_dispose_grid_helper", () => {
    const components = new Components();
    const simpleGrid = new SimpleGrid(components);
    const gridHelper = simpleGrid.get();
    const disposer = new Disposer();
    disposer.dispose(gridHelper);
    expect(gridHelper.parent).toBe(null);
  });
});
