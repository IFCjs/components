// Generated by CodiumAI

/*
Code Analysis

Main functionalities:
The SimpleDimensions class is responsible for creating and managing simple dimension lines in a 3D scene. It allows the user to draw dimensions by clicking on vertices or points in the scene, and provides functionality for deleting and hiding dimensions. It also includes a UI component in the form of a button for enabling and disabling the drawing of dimensions.

Methods:
- create(): starts the process of creating a new dimension line by setting the start point
- delete(): deletes a dimension line by clicking on its bounding box
- deleteAll(): deletes all dimension lines
- drawStart(): sets the start point for a new dimension line
- drawInProcess(): updates the end point of a dimension line while it is being drawn
- drawEnd(): finishes the drawing of a dimension line and adds it to the list of dimensions
- cancelDrawing(): cancels the drawing of a dimension line
- dispose(): disposes of all resources used by the class
- update(): updates the preview element and the position of the endpoint mesh

Fields:
- name: the name of the class
- beforeUpdate: an event that is triggered before an update
- afterUpdate: an event that is triggered after an update
- afterCreate: an event that is triggered after a dimension line is created
- beforeCreate: an event that is triggered before a dimension line is created
- afterDelete: an event that is triggered after a dimension line is deleted
- beforeDelete: an event that is triggered before a dimension line is deleted
- onCreate: an event that is triggered when a dimension line is created
- onDelete: an event that is triggered when a dimension line is deleted
- uiElement: the UI component for enabling and disabling the drawing of dimensions
- snapDistance: the distance at which the endpoint mesh snaps to a vertex or point
- previewElement: the preview element for the endpoint mesh
- _lineMaterial: the material used for the dimension lines
- _endpointMesh: the mesh used for the endpoint of the dimension lines
- _dimensions: the list of dimension lines
- _visible: whether the dimension lines are visible or not
- _enabled: whether the drawing of dimension lines is enabled or not
- _raycaster: the raycaster used for detecting intersections
- _disposer: a disposer for disposing of resources
*/

import * as THREE from "three";
import { Components } from "../Components";
import { SimpleDimensions } from "./index";
import { SimpleDimensionLine } from "./simple-dimension-line";
import { SimpleRenderer } from "../SimpleRenderer";

describe("SimpleDimensions_class", () => {
  // Tests that a new dimension line is created correctly.
  it("test_creating_new_dimension_line", () => {
    // Arrange
    const components = new Components();

    components.renderer = new SimpleRenderer(
      components,
      document.createElement("div")
    );

    components.init();

    const simpleDimensions = new SimpleDimensions(components);
    const start = new THREE.Vector3(0, 0, 0);
    const end = new THREE.Vector3(1, 1, 1);
    const lineMaterial = new THREE.LineDashedMaterial({
      color: 0x000000,
      linewidth: 2,
      depthTest: false,
      dashSize: 0.2,
      gapSize: 0.2,
    });
    const endpoint = simpleDimensions["_endpointMesh"];

    // Act
    simpleDimensions.create();
    simpleDimensions["_temp"].start = start;
    simpleDimensions["_temp"].end = end;
    simpleDimensions["_lineMaterial"] = lineMaterial;
    simpleDimensions["_temp"].dimension?.dispose();
    simpleDimensions["_temp"].dimension = new SimpleDimensionLine(components, {
      start,
      end,
      lineMaterial,
      endpoint,
    });

    // Assert
    expect(simpleDimensions.get().length).toBe(1);
  });

  it("test_deleting_dimension_line", () => {
    // Arrange
    const components = new Components();
    const simpleDimensions = new SimpleDimensions(components);
    const start = new THREE.Vector3(0, 0, 0);
    const end = new THREE.Vector3(1, 1, 1);
    const lineMaterial = new THREE.LineDashedMaterial({
      color: 0x000000,
      linewidth: 2,
      depthTest: false,
      dashSize: 0.2,
      gapSize: 0.2,
    });
    const endpoint = simpleDimensions["_endpointMesh"];
    simpleDimensions.create();
    simpleDimensions["_temp"].start = start;
    simpleDimensions["_temp"].end = end;
    simpleDimensions["_lineMaterial"] = lineMaterial;
    simpleDimensions["_temp"].dimension?.dispose();
    simpleDimensions["_temp"].dimension = new SimpleDimensionLine(components, {
      start,
      end,
      lineMaterial,
      endpoint,
    });

    // Act
    simpleDimensions.delete();

    // Assert
    expect(simpleDimensions.get().length).toBe(0);
  });

  it("test_cancelling_drawing_dimension_line", () => {
    // Arrange
    const components = new Components();
    const simpleDimensions = new SimpleDimensions(components);
    const start = new THREE.Vector3(0, 0, 0);
    const end = new THREE.Vector3(1, 1, 1);
    const lineMaterial = new THREE.LineDashedMaterial({
      color: 0x000000,
      linewidth: 2,
      depthTest: false,
      dashSize: 0.2,
      gapSize: 0.2,
    });
    const endpoint = simpleDimensions["_endpointMesh"];

    // Act
    simpleDimensions.create();
    simpleDimensions["_temp"].start = start;
    simpleDimensions["_temp"].end = end;
    simpleDimensions["_lineMaterial"] = lineMaterial;
    simpleDimensions["_temp"].dimension?.dispose();
    simpleDimensions["_temp"].dimension = new SimpleDimensionLine(components, {
      start,
      end,
      lineMaterial,
      endpoint,
    });
    simpleDimensions.cancelDrawing();

    // Assert
    expect(simpleDimensions.get().length).toBe(0);
  });
});
