// Generated by CodiumAI

/*
Code Analysis

Main functionalities:
The SimpleRenderer class is a subclass of BaseRenderer and provides a basic renderer
capable of rendering 3D and 2D objects. It implements the Disposable, Updateable,
and Resizeable interfaces, allowing it to be disposed of, updated, and resized.
It contains a WebGLRenderer and a CSS2DRenderer, which are used to render 3D and 2D
objects respectively. The class also handles setting up the renderers, resizing them,
and rendering the scene and camera.

Methods:
- constructor(components: Components, container: HTMLElement): creates a new instance of SimpleRenderer with the given Components and HTMLElement container
- get(): returns the WebGLRenderer instance
- update(_delta: number): updates the renderer and renders the scene and camera
- dispose(): disposes of the renderer and resets the beforeUpdate and afterUpdate events
- getSize(): returns the size of the renderer
- resize(): resizes the renderer
- setupRenderers(): sets up the WebGLRenderer and CSS2DRenderer
- setupEvents(): sets up the resize event listener

Fields:
- name: the name of the renderer
- enabled: a boolean indicating whether the renderer is enabled or not
- beforeUpdate: an Event that is triggered before the renderer is updated
- afterUpdate: an Event that is triggered after the renderer is updated
- _renderer2D: a CSS2DRenderer instance used to render 2D objects
- _renderer: a WebGLRenderer instance used to render 3D objects
- components: the Components instance used by the renderer
- container: the HTMLElement container used by the renderer
*/

import * as THREE from "three";
import { Components } from "../Components";
import { SimpleRenderer } from "./index";

describe("SimpleRenderer", () => {
  // Tests that the renderer is properly initialized with Components and a container element.
  it("test_renderer_initialized", () => {
    const components = new Components();
    const container = document.createElement("div");
    const renderer = new SimpleRenderer(components, container);
    expect(renderer).toBeInstanceOf(SimpleRenderer);
    expect(renderer.components).toBe(components);
    expect(renderer.container).toBe(container);
    expect(renderer.get()).toBeInstanceOf(THREE.WebGLRenderer);
  });

  // Tests that the renderer is enabled and updates successfully.
  it("test_renderer_enabled", () => {
    const components = new Components();
    const container = document.createElement("canvas");
    const renderer = new SimpleRenderer(components, container);
    const spyUpdate = jest.spyOn(renderer, "update");

    expect(renderer.enabled).toBe(true);
    expect(spyUpdate).toHaveBeenCalled();
  });

  // Tests that the renderer is disabled and does not update.
  it("test_renderer_disabled", () => {
    const components = new Components();
    const container = document.createElement("div");
    const renderer = new SimpleRenderer(components, container);
    const spyUpdate = jest.spyOn(renderer, "update");
    renderer.enabled = false;
    renderer.update(1);
    expect(spyUpdate).not.toHaveBeenCalled();
  });

  // Tests that the renderer supports local clipping planes.
  it("test_renderer_clipping_planes", () => {
    const components = new Components();
    const container = document.createElement("div");
    const renderer = new SimpleRenderer(components, container);
    const plane = new THREE.Plane();
    renderer.togglePlane(true, plane, true);
    expect(renderer.clippingPlanes).toContain(plane);
  });

  // Tests that the renderer is resized successfully.
  it("test_renderer_resized", () => {
    const components = new Components();
    const container = document.createElement("div");
    container.style.width = "500px";
    container.style.height = "500px";
    const renderer = new SimpleRenderer(components, container);
    renderer.resize();
    expect(renderer.getSize().x).toBe(500);
    expect(renderer.getSize().y).toBe(500);
  });

  // Tests that the renderer is disposed and removed from the container element.
  it("test_renderer_disposed", () => {
    const components = new Components();
    const container = document.createElement("div");
    const renderer = new SimpleRenderer(components, container);
    const spyDispose = jest.spyOn(renderer, "dispose");
    renderer.dispose();
    expect(spyDispose).toHaveBeenCalled();
    expect(renderer.enabled).toBe(false);
    expect(container.contains(renderer.get().domElement)).toBe(false);
  });
});
