// vite.config.ts
import dts from "file:///C:/Users/anton/Desktop/code/engine_components/node_modules/vite-plugin-dts/dist/index.mjs";
import { defineConfig } from "file:///C:/Users/anton/Desktop/code/engine_components/node_modules/vite/dist/node/index.js";
import * as path from "path";
import * as fs from "fs";

// package.json
var peerDependencies = {
  "@thatopen/fragments": "2.3.0-alpha.1",
  three: "^0.160.1",
  "web-ifc": "0.0.57"
};

// vite.config.ts
var __vite_injected_original_dirname = "C:\\Users\\anton\\Desktop\\code\\engine_components\\packages\\front";
var clonePackageJSON = () => {
  return {
    name: "copy-package-json",
    async writeBundle() {
      if (!fs.existsSync("./dist"))
        return;
      console.log("Cloning package.json!");
      const packageBuffer = fs.readFileSync("./package.json");
      fs.writeFileSync("./dist/package.json", packageBuffer);
    }
  };
};
var generateTSNamespace = (dts2) => {
  if (!fs.existsSync("./dist"))
    return;
  console.log("Generating namespace!");
  let types = "";
  dts2.forEach((declaration) => {
    const cleanedType = declaration.replace(/export\s+\*?\s+from\s+"[^"]+";/g, "").replace(/^\s*[\r\n]/gm, "").replace(/`/g, "'");
    types += cleanedType;
  });
  fs.writeFileSync(
    "./dist/namespace.d.ts",
    `declare namespace OBC {
${types}
}`
  );
};
var vite_config_default = defineConfig({
  build: {
    lib: {
      entry: path.resolve(__vite_injected_original_dirname, "./src/index.ts"),
      formats: ["es"],
      fileName: "index"
    },
    rollupOptions: {
      external: Object.keys(peerDependencies),
      output: {
        globals: {
          three: "THREE",
          "@thatopen/fragments": "FRAGS",
          "web-ifc": "WEB-IFC"
        }
      }
    }
  },
  plugins: [
    clonePackageJSON(),
    dts({
      include: ["./src"],
      exclude: ["./src/**/example.ts", "./src/**/*.test.ts"],
      afterBuild: generateTSNamespace
    })
  ]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcYW50b25cXFxcRGVza3RvcFxcXFxjb2RlXFxcXGVuZ2luZV9jb21wb25lbnRzXFxcXHBhY2thZ2VzXFxcXGZyb250XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxhbnRvblxcXFxEZXNrdG9wXFxcXGNvZGVcXFxcZW5naW5lX2NvbXBvbmVudHNcXFxccGFja2FnZXNcXFxcZnJvbnRcXFxcdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1VzZXJzL2FudG9uL0Rlc2t0b3AvY29kZS9lbmdpbmVfY29tcG9uZW50cy9wYWNrYWdlcy9mcm9udC92aXRlLmNvbmZpZy50c1wiOy8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcyAqL1xyXG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnNcIjtcclxuaW1wb3J0ICogYXMgcGFja2FnZUpzb24gZnJvbSBcIi4vcGFja2FnZS5qc29uXCI7XHJcblxyXG5jb25zdCBjbG9uZVBhY2thZ2VKU09OID0gKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiBcImNvcHktcGFja2FnZS1qc29uXCIsXHJcbiAgICBhc3luYyB3cml0ZUJ1bmRsZSgpIHtcclxuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKFwiLi9kaXN0XCIpKSByZXR1cm47XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiQ2xvbmluZyBwYWNrYWdlLmpzb24hXCIpO1xyXG4gICAgICBjb25zdCBwYWNrYWdlQnVmZmVyID0gZnMucmVhZEZpbGVTeW5jKFwiLi9wYWNrYWdlLmpzb25cIik7XHJcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoXCIuL2Rpc3QvcGFja2FnZS5qc29uXCIsIHBhY2thZ2VCdWZmZXIpO1xyXG4gICAgfSxcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgZ2VuZXJhdGVUU05hbWVzcGFjZSA9IChkdHM6IE1hcDxzdHJpbmcsIHN0cmluZz4pID0+IHtcclxuICBpZiAoIWZzLmV4aXN0c1N5bmMoXCIuL2Rpc3RcIikpIHJldHVybjtcclxuICBjb25zb2xlLmxvZyhcIkdlbmVyYXRpbmcgbmFtZXNwYWNlIVwiKTtcclxuICBsZXQgdHlwZXMgPSBcIlwiO1xyXG4gIGR0cy5mb3JFYWNoKChkZWNsYXJhdGlvbikgPT4ge1xyXG4gICAgY29uc3QgY2xlYW5lZFR5cGUgPSBkZWNsYXJhdGlvblxyXG4gICAgICAucmVwbGFjZSgvZXhwb3J0XFxzK1xcKj9cXHMrZnJvbVxccytcIlteXCJdK1wiOy9nLCBcIlwiKVxyXG4gICAgICAucmVwbGFjZSgvXlxccypbXFxyXFxuXS9nbSwgXCJcIilcclxuICAgICAgLnJlcGxhY2UoL2AvZywgXCInXCIpO1xyXG4gICAgdHlwZXMgKz0gY2xlYW5lZFR5cGU7XHJcbiAgfSk7XHJcbiAgZnMud3JpdGVGaWxlU3luYyhcclxuICAgIFwiLi9kaXN0L25hbWVzcGFjZS5kLnRzXCIsXHJcbiAgICBgZGVjbGFyZSBuYW1lc3BhY2UgT0JDIHtcXG4ke3R5cGVzfVxcbn1gLFxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIGJ1aWxkOiB7XHJcbiAgICBsaWI6IHtcclxuICAgICAgZW50cnk6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi9zcmMvaW5kZXgudHNcIiksXHJcbiAgICAgIGZvcm1hdHM6IFtcImVzXCJdLFxyXG4gICAgICBmaWxlTmFtZTogXCJpbmRleFwiLFxyXG4gICAgfSxcclxuICAgIHJvbGx1cE9wdGlvbnM6IHtcclxuICAgICAgZXh0ZXJuYWw6IE9iamVjdC5rZXlzKHBhY2thZ2VKc29uLnBlZXJEZXBlbmRlbmNpZXMpLFxyXG4gICAgICBvdXRwdXQ6IHtcclxuICAgICAgICBnbG9iYWxzOiB7XHJcbiAgICAgICAgICB0aHJlZTogXCJUSFJFRVwiLFxyXG4gICAgICAgICAgXCJAdGhhdG9wZW4vZnJhZ21lbnRzXCI6IFwiRlJBR1NcIixcclxuICAgICAgICAgIFwid2ViLWlmY1wiOiBcIldFQi1JRkNcIixcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHBsdWdpbnM6IFtcclxuICAgIGNsb25lUGFja2FnZUpTT04oKSxcclxuICAgIGR0cyh7XHJcbiAgICAgIGluY2x1ZGU6IFtcIi4vc3JjXCJdLFxyXG4gICAgICBleGNsdWRlOiBbXCIuL3NyYy8qKi9leGFtcGxlLnRzXCIsIFwiLi9zcmMvKiovKi50ZXN0LnRzXCJdLFxyXG4gICAgICBhZnRlckJ1aWxkOiBnZW5lcmF0ZVRTTmFtZXNwYWNlLFxyXG4gICAgfSksXHJcbiAgXSxcclxufSk7XHJcbiIsICJ7XHJcbiAgXCJuYW1lXCI6IFwiQHRoYXRvcGVuL2NvbXBvbmVudHMtZnJvbnRcIixcclxuICBcImRlc2NyaXB0aW9uXCI6IFwiQ29sbGVjdGlvbiBvZiBmcm9udGVuZCB0b29scyB0byBhdXRob3IgQklNIGFwcHMuXCIsXHJcbiAgXCJ2ZXJzaW9uXCI6IFwiMi4zLjAtYWxwaGEuNlwiLFxyXG4gIFwiYXV0aG9yXCI6IFwiVGhhdCBPcGVuIENvbXBhbnlcIixcclxuICBcImNvbnRyaWJ1dG9yc1wiOiBbXHJcbiAgICBcIkFudG9uaW8gR29uemFsZXogVmllZ2FzIChodHRwczovL2dpdGh1Yi5jb20vYWd2aWVnYXMpXCIsXHJcbiAgICBcIkp1YW4gSG95b3MgKGh0dHBzOi8vZ2l0aHViLmNvbS9Ib3lvc0p1YW4pXCIsXHJcbiAgICBcIkhhcnJ5IENvbGxpbiAoaHR0cHM6Ly9naXRodWIuY29tL2hhcnJ5Y29sbGluKVwiXHJcbiAgXSxcclxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcclxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL1RoYXRPcGVuL2VuZ2luZV9jb21wb25lbnRzL3RyZWUvbWFpbi9wYWNrYWdlcy9jb21wb25lbnRzLWZyb250I3JlYWRtZVwiLFxyXG4gIFwiYnVnc1wiOiB7XHJcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9UaGF0T3Blbi9lbmdpbmVfY29tcG9uZW50cy9pc3N1ZXNcIlxyXG4gIH0sXHJcbiAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXHJcbiAgXCJtYWluXCI6IFwiZGlzdC9pbmRleC5qc1wiLFxyXG4gIFwidHlwZXNcIjogXCJkaXN0L2luZGV4LmQudHNcIixcclxuICBcImZpbGVzXCI6IFtcclxuICAgIFwiZGlzdFwiXHJcbiAgXSxcclxuICBcInJlcG9zaXRvcnlcIjoge1xyXG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXHJcbiAgICBcInVybFwiOiBcImdpdCtodHRwczovL2dpdGh1Yi5jb20vVGhhdE9wZW4vZW5naW5lX2NvbXBvbmVudHMvdHJlZS9tYWluL3BhY2thZ2VzL2NvbXBvbmVudHMtZnJvbnQuZ2l0XCJcclxuICB9LFxyXG4gIFwicGFja2FnZU1hbmFnZXJcIjogXCJ5YXJuQDMuMi4xXCIsXHJcbiAgXCJzY3JpcHRzXCI6IHtcclxuICAgIFwiZGV2XCI6IFwidml0ZSAtLWhvc3RcIixcclxuICAgIFwidGVzdFwiOiBcImplc3RcIixcclxuICAgIFwiYnVpbGRcIjogXCJ0c2MgLS1wIC4vdHNjb25maWctYnVpbGQuanNvbiAmJiB2aXRlIGJ1aWxkXCIsXHJcbiAgICBcInByZXB1Ymxpc2hPbmx5XCI6IFwieWFybiBidWlsZFwiLFxyXG4gICAgXCJwdWJsaXNoLXJlcG9cIjogXCJucG0gcHVibGlzaFwiLFxyXG4gICAgXCJwdWJsaXNoLWFscGhhXCI6IFwibnBtIHB1Ymxpc2ggLS10YWcgYWxwaGFcIlxyXG4gIH0sXHJcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiQHRoYXRvcGVuL2ZyYWdtZW50c1wiOiBcIjIuMy4wLWFscGhhLjFcIixcclxuICAgIFwidGhyZWVcIjogXCJeMC4xNjAuMVwiLFxyXG4gICAgXCJ3ZWItaWZjXCI6IFwiMC4wLjU3XCJcclxuICB9LFxyXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiQHRoYXRvcGVuL2ZyYWdtZW50c1wiOiBcIj49Mi4zLjAtYWxwaGFcIixcclxuICAgIFwiQHRoYXRvcGVuL3VpXCI6IFwifjIuMi4wXCIsXHJcbiAgICBcIkB0aGF0b3Blbi91aS1vYmNcIjogXCJ+Mi4yLjBcIixcclxuICAgIFwiQHR5cGVzL2VhcmN1dFwiOiBcIl4yLjEuNFwiLFxyXG4gICAgXCJAdHlwZXMvdGhyZWVcIjogXCJeMC4xNjAuMFwiLFxyXG4gICAgXCJ0aHJlZVwiOiBcIl4wLjE2MC4xXCIsXHJcbiAgICBcIndlYi1pZmNcIjogXCIwLjAuNTdcIlxyXG4gIH0sXHJcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJAdGhhdG9wZW4vY29tcG9uZW50c1wiOiBcIj49Mi4zLjAtYWxwaGFcIixcclxuICAgIFwiY2FtZXJhLWNvbnRyb2xzXCI6IFwiMi43LjNcIixcclxuICAgIFwiZGV4aWVcIjogXCJeNC4wLjRcIixcclxuICAgIFwiZWFyY3V0XCI6IFwiXjIuMi40XCIsXHJcbiAgICBcIm44YW9cIjogXCIxLjUuMVwiLFxyXG4gICAgXCJwb3N0cHJvY2Vzc2luZ1wiOiBcIjYuMzQuMlwiXHJcbiAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxPQUFPLFNBQVM7QUFDaEIsU0FBUyxvQkFBb0I7QUFDN0IsWUFBWSxVQUFVO0FBQ3RCLFlBQVksUUFBUTs7O0FDOEJsQix1QkFBb0I7QUFBQSxFQUNsQix1QkFBdUI7QUFBQSxFQUN2QixPQUFTO0FBQUEsRUFDVCxXQUFXO0FBQ2I7OztBRHRDRixJQUFNLG1DQUFtQztBQU96QyxJQUFNLG1CQUFtQixNQUFNO0FBQzdCLFNBQU87QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLE1BQU0sY0FBYztBQUNsQixVQUFJLENBQUksY0FBVyxRQUFRO0FBQUc7QUFDOUIsY0FBUSxJQUFJLHVCQUF1QjtBQUNuQyxZQUFNLGdCQUFtQixnQkFBYSxnQkFBZ0I7QUFDdEQsTUFBRyxpQkFBYyx1QkFBdUIsYUFBYTtBQUFBLElBQ3ZEO0FBQUEsRUFDRjtBQUNGO0FBRUEsSUFBTSxzQkFBc0IsQ0FBQ0EsU0FBNkI7QUFDeEQsTUFBSSxDQUFJLGNBQVcsUUFBUTtBQUFHO0FBQzlCLFVBQVEsSUFBSSx1QkFBdUI7QUFDbkMsTUFBSSxRQUFRO0FBQ1osRUFBQUEsS0FBSSxRQUFRLENBQUMsZ0JBQWdCO0FBQzNCLFVBQU0sY0FBYyxZQUNqQixRQUFRLG1DQUFtQyxFQUFFLEVBQzdDLFFBQVEsZ0JBQWdCLEVBQUUsRUFDMUIsUUFBUSxNQUFNLEdBQUc7QUFDcEIsYUFBUztBQUFBLEVBQ1gsQ0FBQztBQUNELEVBQUc7QUFBQSxJQUNEO0FBQUEsSUFDQTtBQUFBLEVBQTRCLEtBQUs7QUFBQTtBQUFBLEVBQ25DO0FBQ0Y7QUFFQSxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixPQUFPO0FBQUEsSUFDTCxLQUFLO0FBQUEsTUFDSCxPQUFZLGFBQVEsa0NBQVcsZ0JBQWdCO0FBQUEsTUFDL0MsU0FBUyxDQUFDLElBQUk7QUFBQSxNQUNkLFVBQVU7QUFBQSxJQUNaO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixVQUFVLE9BQU8sS0FBaUIsZ0JBQWdCO0FBQUEsTUFDbEQsUUFBUTtBQUFBLFFBQ04sU0FBUztBQUFBLFVBQ1AsT0FBTztBQUFBLFVBQ1AsdUJBQXVCO0FBQUEsVUFDdkIsV0FBVztBQUFBLFFBQ2I7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNQLGlCQUFpQjtBQUFBLElBQ2pCLElBQUk7QUFBQSxNQUNGLFNBQVMsQ0FBQyxPQUFPO0FBQUEsTUFDakIsU0FBUyxDQUFDLHVCQUF1QixvQkFBb0I7QUFBQSxNQUNyRCxZQUFZO0FBQUEsSUFDZCxDQUFDO0FBQUEsRUFDSDtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbImR0cyJdCn0K
